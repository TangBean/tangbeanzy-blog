[{"id":0,"href":"/docs/game-dev/Unity/20230902_use-git-in-unity-project/","title":"Unity Project 文件类型介绍","section":"Unity","content":"\rUnity Project 文件类型介绍\r#\r为什么要介绍这个，因为在把本地的 Unity 通过 Git 提交到 Remote 时，开始纠结哪些内容需要被提交到 Remote，然后发现我似乎不太知道 Unity 工程里的改动，都对应着哪些文件的变化，在 git add 的时候不太知道需要将哪些文件 add 进去。所以就有了这篇文章，介绍 Unity Project 中这些文件夹和文件都是用来放什么的、干什么的。\n开篇上重点，先给出最初问题的答案，所以最后需要被 push 到 remote 的文件有哪些？\n其中 Packages folder 只需要包含 manifest.json,packages-lock.json 这两个文件即可。 基本上必选文件就这些，其他有一些 optional 的可以根据需要加。\n打开一个 Unity 工程，ll -al一下，基本就能看见这些文件夹和文件，接下来我们会一一介绍它们。先介绍文件夹部分，再介绍文件部分。\n文件夹部分\r#\rAssets/\r#\r用途： 项目中所有游戏资源（脚本、模型、纹理、声音等）的存放地点。这是我们改动最频繁的文件夹，也是游戏的核心内容所在。 生命周期： 一直存在。你的工作就是疯狂往这个文件夹里填游戏内容，它没了你游戏也没了。 谁负责管理： 你自个儿。 版本控制： must be push to remote ！！！ 这个文件夹是核中核，core 中 core。 你打开这个文件夹，会发现这里面所有的文件夹、文件，都会有一个同名的 .meta 文件。就下面这样：\nfolder1/\rfolder1.meta\rfile1.txt\rfile1.meta 这个文件是 Unity 给你创建的，是用来存储和这个文件相关的元数据的。一般会与它们所描述的文件或文件夹放在一起，并且它们的名字也会和相应的文件或文件夹名字一样，只是后缀为 .meta。 它里面主要放了以下信息：\n唯一标识符（GUID）： 每个资源（包括文件和文件夹）在 Unity 中都有一个唯一标识符。这确保了即使你更改了文件或文件夹的名称或位置，引用也不会丢失。 类型信息： .meta 文件指示资源的类型，例如是否为纹理、脚本、预制件（Prefab）等。 导入设置： 对于需要导入设置的资源（例如纹理或模型），.meta 文件也会保存这些设置。 其他属性： 某些类型的资源可能有额外的元数据，这些也会被存储在 .meta 文件中。 因为这个文件很重要，所以有一些 注意事项：\n不要手动编辑或删除 .meta 文件，除非你确切知道自己在做什么。 当你在文件系统中（而不是在 Unity 编辑器中）添加、删除或移动文件时，确保相应的 .meta 文件也被一同处理。 Packages/\r#\r用途： 此文件夹用于存储 Unity Package Manager 管理的所有外部包和库。这可能包括 Unity 提供的标准库和从第三方获取的库。 生命周期： 根据项目需求添加或移除。通常在项目初始化时设置，但后期也可进行修改。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： 部分 push to remote。虽然包的具体文件通常不在版本控制之内，但包里这两个文件要被 push to remote：manifest.json,packages-lock.json。为了确保大家的依赖的包的版本是相同的，作用和 java 里的 maven pom 文件有点类似。 总体来说，manifest.json 主要用于声明依赖，而 packages-lock.json 用于确保这些依赖在所有环境中保持一致。这两个文件共同工作，以简化 Unity 项目的依赖管理。 它们的具体作用如下：\nPackages/manifest.json 依赖管理： 这个文件用于列出 Unity 项目所依赖的所有 Unity Package，包括版本信息。当你通过 Unity 的 Package Manager 添加或删除包时，这个文件会自动更新。 自定义依赖： 你也可以手动编辑这个文件，以添加来自其他来源（如 Git 存储库）的包。 项目共享： 当其他开发者需要运行你的项目时，Unity 会参考这个文件自动下载和安装必要的包，确保项目在不同的机器上具有一致的行为。 Packages/packages-lock.json 锁定版本： 这个文件锁定了项目中使用的每个包的具体版本。这样做的目的是确保在不同的环境和开发机器上，每个包的版本都是一致的。 版本控制： 这个文件通常也会被添加到版本控制系统中，除非你有明确的理由不这么做。将此文件添加到版本控制系统可以确保团队中的每个成员都使用相同版本的依赖包，从而减少“在我的机器上能运行”这类问题。 自动生成： 一般情况下，你不需要手动编辑这个文件。当你通过 Package Manager 添加、更新或删除包时，这个文件会自动更新。 ProjectSettings/\r#\r用途： 这个文件夹包含项目的全局设置，如质量设置、构建设置、输入设置等。 生命周期： 一直存在。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： push to remote。为了确保所有参与项目开封的人都使用相同的项目设置。 Library/\r#\r用途： 用于存储 Unity 编辑器生成的所有中间文件，如预编译的资产和缓存。这是为了提高加载和编译速度。 生命周期： 可以在项目周期的任何时间内生成和删除。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： No。因为它里面的数据是可以从 Assets/ 和 ProjectSettings/ 重新生成的。通常在项目打开时生成。 Logs/\r#\r用途： 存储 Unity 编辑器和运行时的日志文件，根据 Unity 编辑器和应用程序的运行状态生成和更新。 生命周期： 这个文件夹会一直在，但里面的文件会根据 Unity 编辑器和应用程序的运行状态生成和更新。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： No。日志文件会在每次运行 Unity 编辑器或构建的应用程序时生成或更新。是和游戏功能没什么功能的数据。 obj/\r#\r用途： 与 .NET 构建流程相关的临时文件和中间状态通常存放在这里。 生命周期： 与 .NET 构建流程相关的临时文件和中间状态通常存放在这里。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： No。可以重新生成的中间文件不用加。 Temp/\r#\r用途： 存储临时文件，这些文件可能是编译过程中的中间文件、缓存或其他 Unity 需要短暂存储的数据。 生命周期： 这些临时文件会在 Unity 编辑器关闭或者其他相关操作完成后被清除。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。在某些罕见的情况下，清空 Temp 文件夹（确保 Unity 编辑器已关闭）可能会解决一些问题，但通常这并不是必要的操作。 版本控制： No。 UserSettings/\r#\r用途： 用于存储用户级别的设置和配置，这可能包括布局设置、自定义快捷键、插件设置等。 生命周期： 一直存在。关闭 Unity 编辑器也不会消失。 谁负责管理： Unity 自动管理，你不用管，也最好没事别管。 版本控制： No。这是你自己的设置，不用共享给别人。 .git\r#\r用途： Git 版本控制需要。 生命周期： 一直存在。 版本控制： No。 .idea\r#\r用途： 放一些和 Jetbrains Brain 家 IDE 工程相关的一些东西，每太仔细研究过每个文件是干啥的。 生命周期： 一直存在。 谁负责管理： Rider IDE。 版本控制： No。 .plastic\r#\r用途： 在 Unity 工程中通常表示该工程正在使用 Plastic SCM 作为版本控制系统。Plastic SCM 是一个分布式版本控制系统，与 Git 类似，但是设计上有一些不同的方面，并且提供了一些专门针对大型项目和二进制文件（如图像、音频和预编译的资产）的优化。 生命周期： 一直存在。 版本控制： No。 这个文件夹显然不是每个工程都有的，比如我们的工程是用 Git 作为版本控制系统的，那么有 .git 文件夹就可以了，这个文件夹显然是不需要的。所以完全可以删掉，会生成它完全是我在创建项目的时候有一些配置选错了。\n文件部分\r#\r简单总结一下，前面 3 个文件：YGT-Great-World-Simulator.sln,Assembly-CSharp.csproj,Assembly-CSharp-Editor.csproj主要用于 C# 代码编辑和编译。这些文件主要用于与集成开发环境（IDE）如 Visual Studio 或 Rider 等交互，重新生成创建也没啥不可以。\n后面两个文件：.gitignore,ignore.conf主要用于指示哪些文件夹/文件应被版本控制忽略，比如前面被明确标明不需要被加入到版本控制中的文件夹们。它们的区别在于，.gitignore是专为 Git 设计的，ignore.conf则更为通用，其具体用途和语法取决于它在哪里被使用，所以我们两个都加了。\nYGT-Great-World-Simulator.sln（工程名.sln）\r#\r用途： 定义了项目的结构和各个项目间的依赖关系，用于组织多个项目文件（如下面的 .csproj 文件）。它描述了工程中所有子项目之间的关系和依赖。 IDE 交互： 当你在 IDE 中打开这个文件时，IDE 会加载整个 Unity 工程的代码，包括运行时和编辑器脚本。 版本控制： 可选。看是否需要在团队间共享这个配置，我觉得不共享也是可以的。 Assembly-CSharp.csproj\r#\r用途： 这个文件描述了 Unity 项目中主要运行时代码的编译设置。这包括哪些 C# 文件需要被编译、引用了哪些库等。 IDE 交互： 当你在 IDE 中打开 Unity 工程时，这个文件帮助 IDE 理解如何组织和编译你的代码。 版本控制： 可选。看是否需要在团队间共享这个配置，我觉得不共享也是可以的。 Assembly-CSharp-Editor.csproj\r#\r用途： 这个文件与 Assembly-CSharp.csproj 类似，但是专门用于 Unity 编辑器脚本。这些脚本通常在 Unity 编辑器中运行，而不是在最终构建的游戏中。 IDE 交互： 这个文件同样用于帮助 IDE 理解如何组织和编译编辑器特定的代码。 版本控制： 可选。看是否需要在团队间共享这个配置，我觉得不共享也是可以的。 .gitignore\r#\r用途： .gitignore文件是用于 Git 版本控制系统的。当你在一个使用 Git 的项目中进行操作（如克隆、提交、推送等）时，Git 会参考.gitignore文件来决定哪些文件或目录应当被忽略，即不纳入版本控制。 适用范围： 仅适用于 Git。 ignore.conf\r#\r用途： ignore.conf 文件的用途取决于它在哪个系统或应用中被使用。例如，某些备份软件或自定义应用可能使用 ignore.conf 来确定哪些文件应该被忽略。此外，Plastic SCM 这样的其他版本控制系统也可能使用类似 ignore.conf 的文件。 适用范围： 可以在不同的应用和系统中使用，不限于版本控制。 "},{"id":1,"href":"/docs/others/tools-sharing/20230625_about-edge-browser/","title":"关于 MS Edge 的一些很棒的功能","section":"工具分享","content":"\r关于 MS Edge 的一些很棒的功能\r#\r1. 分屏功能\r#\r效果\n实用场景\n特别适用于看文章做笔记！左边屏幕放要看的文章，右边放一个笔记的窗口，啥在线笔记都行，飞书、语雀、Notion 之类的。\n开启方式\n这是个实验性的功能，开启按钮被藏起来了。。。不能之间在 设置 中找到。。。\n地址栏输入 edge://flags/#edge-split-screen\n然后你能看到这个配置的开启设置选项，把它置成 enabled，后重启 Edge，就有了。\n"},{"id":2,"href":"/docs/codes/","title":"写代码","section":"Docs","content":"\r写代码\r#\rContents\r#\r"},{"id":3,"href":"/docs/game-dev/","title":"做游戏","section":"Docs","content":"\r做游戏\r#\rContents\r#\rUnity\r#\rUnity Project 文件类型介绍？| 2023-09-02 "},{"id":4,"href":"/docs/AI/","title":"AI相关","section":"Docs","content":"\rAI相关\r#\rContents\r#\r"},{"id":5,"href":"/docs/others/","title":"非技术","section":"Docs","content":"\r非技术\r#\rContents\r#\r工具分享\r#\r关于 MS Edge 的一些很棒的功能 | 2023-06-25 "},{"id":6,"href":"/posts/2023/09/2023-09-03/","title":"2023-09-03","section":"Beanの日志","content":"今天的重大发现！为什么我用家里的键盘会左手腕疼，但是在公司就不会。\n因为家里用的是一把 84 键的键盘，公司用的是一把标准 87 键的键盘。两个键盘也是搭配的适合各自长度的键盘腕托。然后发现，让手腕感受到舒服的长度可能就正好卡在了 32cm - 36cm 之间，32cm 正好短了些，如果想保持手腕在腕托上，但手要去做一些操作，就需要横着向外弯曲自己的手腕，长时间做这个动作，手腕就会变痛。同时因为腕托偏短，手搭在腕托上的时候，会刻意的往里收着，然后那个弯曲的角度就变得更大了。\n所以我下单了了一个 36cm 搭配标准 87 键键盘的腕托给家里的 84 键键盘用，希望能解决问题吧，等我的腕托到了再发表看法。\n"},{"id":7,"href":"/docs/","title":"Docs","section":"Introduction","content":""},{"id":8,"href":"/docs/game-dev/Unity/","title":"Unity","section":"做游戏","content":"\rUnity\r#\rContents\r#\rUnity Project 文件类型介绍？| 2023-09-02\r#\r"},{"id":9,"href":"/posts/2023/07/2023-07-01/","title":"2023-07-01","section":"Beanの日志","content":"下午看了一会 3D 数学基础知识，赶脚死去的高中数学知识在袭击我 =。=\nSummary\r#\rFocus time Bedtime 3h40m+ (有部分没计时) Before 0:00 Today\n修之前的 鼠标地图的位置、缩放、旋转角度 功能的 bug，以及做一些调整： 【Bug】旋转之后再移动地图，会移动方向错乱，比如像左拖动地图，但是地图向上移动 【Follow up】完善旋转地图功能 【Follow up】放大缩小地图，放大和缩小中心点，不应该是相机本身，应该是当前鼠标所在的位置 Tomorrow\nYGT 周会 \u0026amp; 做下周计划 调研多层地图和Game Object自动加卸载的实现 "},{"id":10,"href":"/posts/2023/06/2023-06-29/","title":"2023-06-29","section":"Beanの日志","content":"今天看到了一句关于 VR 未来的描述，感觉很有道理：\n相信总有一天，虛拟现实成为每个人都想要的东西，然后才会成为每个人都能负担得起的东西。\n还有一句鸡汤，深得我心，好像是来自《明朝那些事儿》的大结局吧，出处懒得去确认了 =。=\n成功只有一个 —— 按照自己的方式，去度过人生。\nSummary\r#\rFocus time Bedtime 2h32m Before 0:00 Today\n调研\u0026amp;实现通过鼠标调整相机中地图的位置、缩放、旋转角度。 Tomorrow\n修个今天写的BUG：相机旋转之后再平移，会移动方向不对的问题。 "},{"id":11,"href":"/posts/2023/06/2023-06-28/","title":"2023-06-28","section":"Beanの日志","content":"再一次重读《Doom启示录》，还是很受到激励，什么时候才能拥有像卡神一样的专注力呢 =。=\n但写代码确实是一件，能让人忘记不开心事情的事情，可能因为它比较消耗 CPU、内存，让脑子没有其他的资源想些有的没的，然后就忘记不开心的事情了。\n"},{"id":12,"href":"/posts/2023/06/2023-06-27/","title":"2023-06-27","section":"Beanの日志","content":"每天一过晚上 11 点就变得超级精神，写码热情高涨是什么神奇的毛病 =。=\nSummary\r#\rFocus time Bedtime 1h48m 0:58 Today\n实现生成高度数据的随机算法可模块化在Unity中配置。 给地图加上了颜色，找到了一个不错的色卡。 Tomorrow\n调研放大缩小地图加载卸载 Object 的实现方法，并开始实现。 把地图预览工具 push 到 YGT Github。 "},{"id":13,"href":"/posts/2023/06/2023-06-26/","title":"2023-06-26","section":"Beanの日志","content":"今天 Side Job 专注时长 2h27m，还不错，但是熬夜到 12:25。\nSummary\nToday\n开发“地形图算法效果预览工具”，进度：模块划分，文件读写，能简单配置长宽高生成地图，但 algo 和 render 还不支持修改。 发现一个问题，地图过大不能全都画出来，内存会炸，现在画个 128x128 的还可以，但画 1024x1024 基本我的电脑就卡死了，需要调研下地图放大缩小的局部加载做法。 Tomorrow\n完成“地形图算法效果预览工具”基本功能开发，实现生成算法可模块化在 Unity 中切换；调研放大缩小地图加载卸载 Object 的实现方法。 "},{"id":14,"href":"/docs/others/tools-sharing/","title":"工具分享","section":"非技术","content":"\r工具分享\r#\rContents\r#\r关于 MS Edge 的一些很棒的功能 | 2023-06-25\r#\r"},{"id":15,"href":"/posts/2023/06/2023-06-24/","title":"2023-06-24","section":"Beanの日志","content":"今天有时间话，整理一下 Blog 的 Homepage。\n今天没时间，今天爆困，今天早早睡了。\n"},{"id":16,"href":"/posts/2023/06/2023-06-23/","title":"2023-06-23","section":"Beanの日志","content":"早上起来搞定了昨天的日志的列表部分不能截断的问题，通过 more 标签来标识需要截断的点，还蛮灵活的，不错不错~\n博客 deploy 的过程有点复杂，写了个小 py 脚本解决，这回好多了。。。\nSummary\nToday\nwin 电脑的 blog 开发环境彻底配置好了，以后可以更新游戏开发日志了。 研究了 Unity 生命周期函数中时间和帧率管理，以及帧同步的一些事情。 继续研究 Minecraft 的地图生成算法。 定好了以后我们的地图要如何分区，先把名字取好了。 Tomorrow\n搞懂 Minecraft 的地图生成算法。 完成我们的地图中地形部分的生成算法设计文档。 "},{"id":17,"href":"/posts/2023/06/2023-06-22/","title":"2023-06-22","section":"Beanの日志","content":"今天是端午节假期的第一天，早上起来吃了肉粽子！\n今天终于抽出来时间好好整理了一下 Blog 的结构，打算后面每天在这里更新当天的进展，后续的计划和以及计划的完成情况。\n这个想法来自于《Doom启示录》，我非常崇拜的计算机图形学之神：约翰·卡马克。\n下面贴几段原文：\n[idsoftware.com] 登录名：johnc 真实姓名：约翰·卡马克 主目录：/raid/nardo/johnc 命令行解释器：/bin/csh 计划： 这是我的日常工作... 当我完成一件事情的时候，我就给它标上星号；当我发现一个错误或是某个尚未实现的 功能时，我也会把它记在这里，一些问题在被解决之前可能会被多次提到。我会不时地整理这个列表，并在我 已经修正好的问题前标上一个加号。 ———— 约翰·卡马克 2.28: * 调页错误 * 拉伸控制台 * 加快水中移动速度 * 杀伤力的方向性 * 盔甲颜色闪烁 * 杀伤力足够大时的碎尸效果 * 调整榴弹 * 加亮玩家昵称 * 钉枪造成的延迟 * 一场游戏结束时服务器端异常终止 + 记分牌 + 可选的全尺寸 + 平视键 + 视频模式15时的异常 + 状态栏上的弹药图标 + 程序出错时允许“重启” + 重生时的血迹残影？ + 火箭弹数量有时会出现负值 + 玩家携带宝物时的发光效果 作战室里依然硝烟弥漫，卡马克觉得应该让玩家们知道，id真的是在Quake的道路上稳步前进着，于是他决定 通过计划文件的方式来把他的工作日志发布到因特网上，计划文件原本只该用于开发者之间的互相沟通，而不 是面向大众，但id迷们已经被罗梅洛早先的天花乱坠吊了太长时间的胃口，卡马克觉得，现在该给玩家们展示 些过硬的数据了。 姓名：约翰·卡马克 职务：程序员 项目：Quake2 最近更新：1998年2月4日 03:06:55 （美国中部标准时间） 嗯，我太长时间没有更新计划文件了。封闭研究进行得很顺利，在一个礼拜里，我除了买可乐外就没有出过旅店 的门，这简直太安逸了，因为办公室里的杂事已经让我有点无法忍受。以后，在项目不紧时，我很可能会经常做 这样的封闭式研究，每季度一次听起来比较合适。 现在要具体谈论三次元引擎还为时过早，Quake在架构完全成型之前走了不少弯路（光树、门洞、等等），所以 我知道，现在研究的东西很可能会有变动，我不想说任何会被某些人当做是“承诺”的话。我只能说，工作的进展 很激动人心。 许多游戏开发者从事这一行是为了制作出最终的游戏，中间漫长的开发阶段只是不得不经历的过程，我尊重他们 的工作态度，但我从事游戏开发的动机略有不同。 当然，我也为游戏的完成而自豪，但这途中所克服的各种困难却更加让我铭记。我已记不清我们那些老游戏发布 时的情景，但我清楚地记得那些技术上的突破，早至《基恩》时的CRTC回绕，以实现平滑的卷轴效果（准确地 说，早至理解苹果2汇编语言中并联数组里的结构体...），知识是需要积累的，学习是需要循序渐进的。 我的人生就是以知识的积累和学习的不断深入来分为不同阶段。我启蒙阶段用的是学校里的苹果2型机，但当时的 条件局限了我的学习速度和深度。今天的状况已经好多了，只要有一台便宜的二手PC机、一张Linux光盘和一个 因特网的账号，你就拥有了足够的工具和资源，你就可以达到任何你期望的编程境界。 《软盘》的头六个月对我而言如同活在梦里，平生第一次，我身边有了比我更博识的程序员（罗梅洛和罗瑟）， 我手边有了大量的书籍和资料，而且我可以全身心投入到编程中，那真是一段好时光。接下来的两年，直到Doom 和几个家用机版本移植完成，我在稳步提高着我的知识面和技术水平，其中包括：更深入的图像编程、网络、 Unix、编译原理、跨平台、RISC架构、等等。 Quake开发的第一年简直如同腾云驾雾，有迈克尔·亚伯拉什作为顾问，我尝试了大量新鲜课题。如果科班出身的 图像程序员们知道我在写Doom时有多业余，他们肯定会大吃一惊，那时的我甚至不能正确地剪切墙体多边形（这 就是为什么我用了那莫名其妙的极坐标系统），Quake逼着我踏上正轨，同时探索出新思路。 Quake开发的最后半年是在痛苦中度过的，那时我满脑子只想着把这该死的东西做完，当然，一切付出到后来都 有了回报，但我绝不怀恋这段时光。Quake2开发的过程中，我的学习经历又得到了进一步扩充：GLQuake、 quakeworld、radiosity、OpenGL工具开发、Win32编程、等等，与此同时，我也有了不少关于下一步如何 做的想法。我认为接下来三位元引擎的开发将和Quake一样硕果累累。我在一些课题上已经有了非常深入的理解， 我还正在尝试一些图像编程以外的全新领域，它们将会和我所有其他方面的工作产生积极互动。末了，自然也会 有一个精彩的游戏。:) 我觉得这样很酷，也能让我更有干活的动力，打算模仿一下~\n好烦，折腾了好久博客的配置，中文的长度判断还是有问题的，搞得这个豆豆日志的列表部分，summary 特别长，但英文就没有问题，估计是根据单词数而非字符数做的长度判断吧。但也懒得找代码改了，就先这样吧 =。=\n"},{"id":18,"href":"/posts/","title":"Beanの日志","section":"Introduction","content":""}]